// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "movie_app/models/entity"

	mock "github.com/stretchr/testify/mock"

	request "movie_app/models/request"
)

// BaseService is an autogenerated mock type for the BaseService type
type BaseService struct {
	mock.Mock
}

// BookShow provides a mock function with given fields: ctx, booking
func (_m *BaseService) BookShow(ctx context.Context, booking request.BookingRequest) (entity.Booking, error) {
	ret := _m.Called(ctx, booking)

	var r0 entity.Booking
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.BookingRequest) (entity.Booking, error)); ok {
		return rf(ctx, booking)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.BookingRequest) entity.Booking); ok {
		r0 = rf(ctx, booking)
	} else {
		r0 = ret.Get(0).(entity.Booking)
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.BookingRequest) error); ok {
		r1 = rf(ctx, booking)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMovie provides a mock function with given fields: ctx, movie
func (_m *BaseService) CreateMovie(ctx context.Context, movie *entity.Movie) error {
	ret := _m.Called(ctx, movie)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Movie) error); ok {
		r0 = rf(ctx, movie)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateShow provides a mock function with given fields: ctx, show
func (_m *BaseService) CreateShow(ctx context.Context, show *entity.Show) error {
	ret := _m.Called(ctx, show)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Show) error); ok {
		r0 = rf(ctx, show)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateTheatre provides a mock function with given fields: ctx, theatre
func (_m *BaseService) CreateTheatre(ctx context.Context, theatre *entity.Theatre) error {
	ret := _m.Called(ctx, theatre)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Theatre) error); ok {
		r0 = rf(ctx, theatre)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteMovie provides a mock function with given fields: ctx, movieId
func (_m *BaseService) DeleteMovie(ctx context.Context, movieId string) error {
	ret := _m.Called(ctx, movieId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, movieId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DisplayMoviesByTheatre provides a mock function with given fields: ctx, theatreId
func (_m *BaseService) DisplayMoviesByTheatre(ctx context.Context, theatreId string) ([]entity.Movie, error) {
	ret := _m.Called(ctx, theatreId)

	var r0 []entity.Movie
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]entity.Movie, error)); ok {
		return rf(ctx, theatreId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []entity.Movie); ok {
		r0 = rf(ctx, theatreId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Movie)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, theatreId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisplayTheatreByMovies provides a mock function with given fields: ctx, movieId
func (_m *BaseService) DisplayTheatreByMovies(ctx context.Context, movieId string) ([]entity.Theatre, error) {
	ret := _m.Called(ctx, movieId)

	var r0 []entity.Theatre
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]entity.Theatre, error)); ok {
		return rf(ctx, movieId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []entity.Theatre); ok {
		r0 = rf(ctx, movieId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Theatre)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, movieId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBooking provides a mock function with given fields: ctx, bookingId
func (_m *BaseService) GetBooking(ctx context.Context, bookingId string) (entity.Booking, error) {
	ret := _m.Called(ctx, bookingId)

	var r0 entity.Booking
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (entity.Booking, error)); ok {
		return rf(ctx, bookingId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.Booking); ok {
		r0 = rf(ctx, bookingId)
	} else {
		r0 = ret.Get(0).(entity.Booking)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, bookingId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMovies provides a mock function with given fields: ctx, movieId
func (_m *BaseService) GetMovies(ctx context.Context, movieId string) ([]entity.Movie, error) {
	ret := _m.Called(ctx, movieId)

	var r0 []entity.Movie
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]entity.Movie, error)); ok {
		return rf(ctx, movieId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []entity.Movie); ok {
		r0 = rf(ctx, movieId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Movie)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, movieId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetShows provides a mock function with given fields: ctx, showName
func (_m *BaseService) GetShows(ctx context.Context, showName string) ([]entity.Show, error) {
	ret := _m.Called(ctx, showName)

	var r0 []entity.Show
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]entity.Show, error)); ok {
		return rf(ctx, showName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []entity.Show); ok {
		r0 = rf(ctx, showName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Show)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, showName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTheatres provides a mock function with given fields: ctx, theatreName
func (_m *BaseService) GetTheatres(ctx context.Context, theatreName string) ([]entity.Theatre, error) {
	ret := _m.Called(ctx, theatreName)

	var r0 []entity.Theatre
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]entity.Theatre, error)); ok {
		return rf(ctx, theatreName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []entity.Theatre); ok {
		r0 = rf(ctx, theatreName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Theatre)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, theatreName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTicketsByShowId provides a mock function with given fields: ctx, showId
func (_m *BaseService) GetTicketsByShowId(ctx context.Context, showId string) ([]entity.Ticket, error) {
	ret := _m.Called(ctx, showId)

	var r0 []entity.Ticket
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]entity.Ticket, error)); ok {
		return rf(ctx, showId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []entity.Ticket); ok {
		r0 = rf(ctx, showId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Ticket)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, showId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMovie provides a mock function with given fields: ctx, movie, movieId
func (_m *BaseService) UpdateMovie(ctx context.Context, movie *entity.Movie, movieId string) error {
	ret := _m.Called(ctx, movie, movieId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Movie, string) error); ok {
		r0 = rf(ctx, movie, movieId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateShow provides a mock function with given fields: ctx, show, showId
func (_m *BaseService) UpdateShow(ctx context.Context, show *entity.Show, showId string) error {
	ret := _m.Called(ctx, show, showId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Show, string) error); ok {
		r0 = rf(ctx, show, showId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewBaseService creates a new instance of BaseService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBaseService(t interface {
	mock.TestingT
	Cleanup(func())
}) *BaseService {
	mock := &BaseService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
