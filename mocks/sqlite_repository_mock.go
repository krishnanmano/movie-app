// Code generated by MockGen. DO NOT EDIT.
// Source: repository/sqlite_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	entity "movie_app/models/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockISqliteRepository is a mock of ISqliteRepository interface.
type MockISqliteRepository struct {
	ctrl     *gomock.Controller
	recorder *MockISqliteRepositoryMockRecorder
}

// MockISqliteRepositoryMockRecorder is the mock recorder for MockISqliteRepository.
type MockISqliteRepositoryMockRecorder struct {
	mock *MockISqliteRepository
}

// NewMockISqliteRepository creates a new mock instance.
func NewMockISqliteRepository(ctrl *gomock.Controller) *MockISqliteRepository {
	mock := &MockISqliteRepository{ctrl: ctrl}
	mock.recorder = &MockISqliteRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISqliteRepository) EXPECT() *MockISqliteRepositoryMockRecorder {
	return m.recorder
}

// CreateBooking mocks base method.
func (m *MockISqliteRepository) CreateBooking(ctx context.Context, booking *entity.Booking) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBooking", ctx, booking)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBooking indicates an expected call of CreateBooking.
func (mr *MockISqliteRepositoryMockRecorder) CreateBooking(ctx, booking interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBooking", reflect.TypeOf((*MockISqliteRepository)(nil).CreateBooking), ctx, booking)
}

// CreateMovie mocks base method.
func (m *MockISqliteRepository) CreateMovie(ctx context.Context, movie *entity.Movie) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMovie", ctx, movie)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMovie indicates an expected call of CreateMovie.
func (mr *MockISqliteRepositoryMockRecorder) CreateMovie(ctx, movie interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMovie", reflect.TypeOf((*MockISqliteRepository)(nil).CreateMovie), ctx, movie)
}

// CreateSeats mocks base method.
func (m *MockISqliteRepository) CreateSeats(ctx context.Context, theatre entity.Theatre) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSeats", ctx, theatre)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSeats indicates an expected call of CreateSeats.
func (mr *MockISqliteRepositoryMockRecorder) CreateSeats(ctx, theatre interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSeats", reflect.TypeOf((*MockISqliteRepository)(nil).CreateSeats), ctx, theatre)
}

// CreateShow mocks base method.
func (m *MockISqliteRepository) CreateShow(ctx context.Context, show *entity.Show) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShow", ctx, show)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateShow indicates an expected call of CreateShow.
func (mr *MockISqliteRepositoryMockRecorder) CreateShow(ctx, show interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShow", reflect.TypeOf((*MockISqliteRepository)(nil).CreateShow), ctx, show)
}

// CreateTheatre mocks base method.
func (m *MockISqliteRepository) CreateTheatre(ctx context.Context, theatre *entity.Theatre) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTheatre", ctx, theatre)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTheatre indicates an expected call of CreateTheatre.
func (mr *MockISqliteRepositoryMockRecorder) CreateTheatre(ctx, theatre interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTheatre", reflect.TypeOf((*MockISqliteRepository)(nil).CreateTheatre), ctx, theatre)
}

// CreateTicketBooking mocks base method.
func (m *MockISqliteRepository) CreateTicketBooking(ctx context.Context, ticketbooking *entity.TicketBooking) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTicketBooking", ctx, ticketbooking)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTicketBooking indicates an expected call of CreateTicketBooking.
func (mr *MockISqliteRepositoryMockRecorder) CreateTicketBooking(ctx, ticketbooking interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTicketBooking", reflect.TypeOf((*MockISqliteRepository)(nil).CreateTicketBooking), ctx, ticketbooking)
}

// CreateTickets mocks base method.
func (m *MockISqliteRepository) CreateTickets(ctx context.Context, seats []entity.Seat, showId uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTickets", ctx, seats, showId)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTickets indicates an expected call of CreateTickets.
func (mr *MockISqliteRepositoryMockRecorder) CreateTickets(ctx, seats, showId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTickets", reflect.TypeOf((*MockISqliteRepository)(nil).CreateTickets), ctx, seats, showId)
}

// DeleteMovie mocks base method.
func (m *MockISqliteRepository) DeleteMovie(ctx context.Context, movieId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMovie", ctx, movieId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMovie indicates an expected call of DeleteMovie.
func (mr *MockISqliteRepositoryMockRecorder) DeleteMovie(ctx, movieId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMovie", reflect.TypeOf((*MockISqliteRepository)(nil).DeleteMovie), ctx, movieId)
}

// DisplayMoviesByTheatre mocks base method.
func (m *MockISqliteRepository) DisplayMoviesByTheatre(ctx context.Context, theatreId int) ([]entity.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisplayMoviesByTheatre", ctx, theatreId)
	ret0, _ := ret[0].([]entity.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisplayMoviesByTheatre indicates an expected call of DisplayMoviesByTheatre.
func (mr *MockISqliteRepositoryMockRecorder) DisplayMoviesByTheatre(ctx, theatreId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisplayMoviesByTheatre", reflect.TypeOf((*MockISqliteRepository)(nil).DisplayMoviesByTheatre), ctx, theatreId)
}

// DisplayTheatreByMovies mocks base method.
func (m *MockISqliteRepository) DisplayTheatreByMovies(ctx context.Context, movieId int) ([]entity.Theatre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisplayTheatreByMovies", ctx, movieId)
	ret0, _ := ret[0].([]entity.Theatre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisplayTheatreByMovies indicates an expected call of DisplayTheatreByMovies.
func (mr *MockISqliteRepositoryMockRecorder) DisplayTheatreByMovies(ctx, movieId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisplayTheatreByMovies", reflect.TypeOf((*MockISqliteRepository)(nil).DisplayTheatreByMovies), ctx, movieId)
}

// GetAvailableTickets mocks base method.
func (m *MockISqliteRepository) GetAvailableTickets(ctx context.Context, showId uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableTickets", ctx, showId)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetAvailableTickets indicates an expected call of GetAvailableTickets.
func (mr *MockISqliteRepositoryMockRecorder) GetAvailableTickets(ctx, showId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableTickets", reflect.TypeOf((*MockISqliteRepository)(nil).GetAvailableTickets), ctx, showId)
}

// GetBooking mocks base method.
func (m *MockISqliteRepository) GetBooking(ctx context.Context, bookingId uint) (entity.Booking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBooking", ctx, bookingId)
	ret0, _ := ret[0].(entity.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBooking indicates an expected call of GetBooking.
func (mr *MockISqliteRepositoryMockRecorder) GetBooking(ctx, bookingId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBooking", reflect.TypeOf((*MockISqliteRepository)(nil).GetBooking), ctx, bookingId)
}

// GetMovie mocks base method.
func (m *MockISqliteRepository) GetMovie(ctx context.Context, movieId string) (entity.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovie", ctx, movieId)
	ret0, _ := ret[0].(entity.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovie indicates an expected call of GetMovie.
func (mr *MockISqliteRepositoryMockRecorder) GetMovie(ctx, movieId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovie", reflect.TypeOf((*MockISqliteRepository)(nil).GetMovie), ctx, movieId)
}

// GetMovies mocks base method.
func (m *MockISqliteRepository) GetMovies(ctx context.Context) ([]entity.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovies", ctx)
	ret0, _ := ret[0].([]entity.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovies indicates an expected call of GetMovies.
func (mr *MockISqliteRepositoryMockRecorder) GetMovies(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovies", reflect.TypeOf((*MockISqliteRepository)(nil).GetMovies), ctx)
}

// GetSeats mocks base method.
func (m *MockISqliteRepository) GetSeats(ctx context.Context, theatreId uint) ([]entity.Seat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSeats", ctx, theatreId)
	ret0, _ := ret[0].([]entity.Seat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSeats indicates an expected call of GetSeats.
func (mr *MockISqliteRepositoryMockRecorder) GetSeats(ctx, theatreId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSeats", reflect.TypeOf((*MockISqliteRepository)(nil).GetSeats), ctx, theatreId)
}

// GetShows mocks base method.
func (m *MockISqliteRepository) GetShows(ctx context.Context) ([]entity.Show, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShows", ctx)
	ret0, _ := ret[0].([]entity.Show)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShows indicates an expected call of GetShows.
func (mr *MockISqliteRepositoryMockRecorder) GetShows(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShows", reflect.TypeOf((*MockISqliteRepository)(nil).GetShows), ctx)
}

// GetTheatre mocks base method.
func (m *MockISqliteRepository) GetTheatre(ctx context.Context, theatreName string) ([]entity.Theatre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTheatre", ctx, theatreName)
	ret0, _ := ret[0].([]entity.Theatre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTheatre indicates an expected call of GetTheatre.
func (mr *MockISqliteRepositoryMockRecorder) GetTheatre(ctx, theatreName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTheatre", reflect.TypeOf((*MockISqliteRepository)(nil).GetTheatre), ctx, theatreName)
}

// GetTheatres mocks base method.
func (m *MockISqliteRepository) GetTheatres(ctx context.Context) ([]entity.Theatre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTheatres", ctx)
	ret0, _ := ret[0].([]entity.Theatre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTheatres indicates an expected call of GetTheatres.
func (mr *MockISqliteRepositoryMockRecorder) GetTheatres(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTheatres", reflect.TypeOf((*MockISqliteRepository)(nil).GetTheatres), ctx)
}

// GetTickets mocks base method.
func (m *MockISqliteRepository) GetTickets(ctx context.Context, seats []uint, showId uint) ([]entity.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTickets", ctx, seats, showId)
	ret0, _ := ret[0].([]entity.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTickets indicates an expected call of GetTickets.
func (mr *MockISqliteRepositoryMockRecorder) GetTickets(ctx, seats, showId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTickets", reflect.TypeOf((*MockISqliteRepository)(nil).GetTickets), ctx, seats, showId)
}

// GetTicketsByShowId mocks base method.
func (m *MockISqliteRepository) GetTicketsByShowId(ctx context.Context, showId uint) ([]entity.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTicketsByShowId", ctx, showId)
	ret0, _ := ret[0].([]entity.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTicketsByShowId indicates an expected call of GetTicketsByShowId.
func (mr *MockISqliteRepositoryMockRecorder) GetTicketsByShowId(ctx, showId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTicketsByShowId", reflect.TypeOf((*MockISqliteRepository)(nil).GetTicketsByShowId), ctx, showId)
}

// UpdateMovie mocks base method.
func (m *MockISqliteRepository) UpdateMovie(ctx context.Context, movie *entity.Movie, movieId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMovie", ctx, movie, movieId)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMovie indicates an expected call of UpdateMovie.
func (mr *MockISqliteRepositoryMockRecorder) UpdateMovie(ctx, movie, movieId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMovie", reflect.TypeOf((*MockISqliteRepository)(nil).UpdateMovie), ctx, movie, movieId)
}

// UpdateShow mocks base method.
func (m *MockISqliteRepository) UpdateShow(ctx context.Context, show *entity.Show, showId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateShow", ctx, show, showId)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateShow indicates an expected call of UpdateShow.
func (mr *MockISqliteRepositoryMockRecorder) UpdateShow(ctx, show, showId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateShow", reflect.TypeOf((*MockISqliteRepository)(nil).UpdateShow), ctx, show, showId)
}
